"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCookie = exports.getInitialState = exports.invertHexCode = exports.generateHexCode = exports.isValidHexColor = exports.scrollToTop = exports.getModuleInfo = exports.cxGenerator = exports.add = exports.waitFor = exports.isFirstRender = exports.cx = exports.slugFn = exports.buildUrl = void 0;
// Dependencies
const slug_1 = __importDefault(require("slug"));
// Utils
const is_1 = require("../is");
function buildUrl(params) {
    return params.filter(v => v).join('/');
}
exports.buildUrl = buildUrl;
function slugFn(str = '') {
    return (0, slug_1.default)(str, { lower: true });
}
exports.slugFn = slugFn;
function cx(...classes) {
    return classes.join(' ').trim();
}
exports.cx = cx;
function isFirstRender(items) {
    return !(0, is_1.isDefined)(items) || items.length === 0 || Object.keys(items).length === 0;
}
exports.isFirstRender = isFirstRender;
function waitFor(time) {
    return new Promise(resolve => setTimeout(resolve, time * 1000));
}
exports.waitFor = waitFor;
function add(cssRule) {
    return {
        if: (condition) => {
            if (condition && cssRule) {
                if ((0, is_1.isString)(cssRule)) {
                    return cssRule;
                }
                let cssString = '';
                Object.keys(cssRule).forEach((property) => {
                    cssString += `${property}: ${cssRule[property]};`;
                });
                return cssString;
            }
            return '';
        }
    };
}
exports.add = add;
function cxGenerator({ ccn, data, className }) {
    const classList = [ccn];
    data.forEach(key => {
        if (key !== '') {
            classList.push(`${ccn}-${key}`);
        }
    });
    if (className) {
        classList.push(className);
    }
    return classList.join(' ');
}
exports.cxGenerator = cxGenerator;
function getModuleInfo(router) {
    let cleanPath = router.asPath.split('?')[0];
    if (cleanPath.substr(-1) === '/') {
        cleanPath = cleanPath.slice(0, -1);
    }
    const [, section, module = 'home', action, id] = cleanPath.split('/');
    return {
        section,
        module,
        action,
        id
    };
}
exports.getModuleInfo = getModuleInfo;
function scrollToTop() {
    document.body.scrollTop = 0;
    document.documentElement.scrollTop = 0;
}
exports.scrollToTop = scrollToTop;
function isValidHexColor(hexCode) {
    return /^#([0-9a-f]{3}){1,2}$/i.test(hexCode.toLowerCase());
}
exports.isValidHexColor = isValidHexColor;
function generateHexCode() {
    let newHex = `${Math.floor(Math.random() * 16777215)
        .toString(16)
        .substring(0, 7)}`;
    if (newHex.length < 6) {
        newHex += 'f';
    }
    return `#${newHex}`;
}
exports.generateHexCode = generateHexCode;
function invertHexCode(hexCode) {
    if (!hexCode) {
        return '#FFFFFF';
    }
    let hex = hexCode.replace('#', '');
    if (hex.length === 3) {
        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    }
    const r = parseInt(hex.slice(0, 2), 16);
    const g = parseInt(hex.slice(2, 4), 16);
    const b = parseInt(hex.slice(4, 6), 16);
    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';
}
exports.invertHexCode = invertHexCode;
function getInitialState() {
    if (typeof window !== 'undefined') {
        if (window.initialState) {
            return window.initialState;
        }
    }
    return {};
}
exports.getInitialState = getInitialState;
function getCookie(name) {
    const cookie = `; ${document.cookie}`.match(`;\\s*${name}=([^;]+)`);
    return cookie ? cookie[1] : '';
}
exports.getCookie = getCookie;
