"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRandomCode = exports.setBase64 = exports.getBase64 = exports.encrypt = void 0;
// Dependencies
const crypto_1 = __importDefault(require("crypto"));
// Utils
const is_1 = require("../is");
function encrypt(str) {
    return crypto_1.default.createHash('sha1').update(str.toString()).digest('hex');
}
exports.encrypt = encrypt;
function getBase64(value) {
    let buffer;
    if ((0, is_1.isString)(value)) {
        buffer = Buffer.from(value, 'base64').toString('ascii');
    }
    if ((0, is_1.isJson)(buffer)) {
        buffer = JSON.parse(Buffer.from(value, 'base64').toString('ascii'));
    }
    return buffer;
}
exports.getBase64 = getBase64;
function setBase64(value) {
    if ((0, is_1.isObject)(value)) {
        return Buffer.from(JSON.stringify(value)).toString('base64');
    }
    return (0, is_1.isString)(value) ? Buffer.from(value).toString('base64') : null;
}
exports.setBase64 = setBase64;
function getRandomCode(max) {
    let code = '';
    let randomPoz;
    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    max = max || 12;
    for (let i = 0; i < max; i += 1) {
        randomPoz = Math.floor(Math.random() * charset.length);
        code += charset.substring(randomPoz, randomPoz + 1);
    }
    return code;
}
exports.getRandomCode = getRandomCode;
