"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
describe('#isArray', () => {
    it('should return true if is an Array', () => {
        expect((0, index_1.isArray)([1, 2, 3])).toBe(true);
    });
    it('should return false if is not an Array', () => {
        expect((0, index_1.isArray)({
            bar: 'bar',
            foo: 'foo'
        })).toBe(false);
    });
});
describe('#isDefined', () => {
    it('should return true if a variable is defined', () => {
        const test = 'Foo';
        expect((0, index_1.isDefined)(test)).toBe(true);
    });
    it('should return false if a variable is undefined', () => {
        let test;
        expect((0, index_1.isDefined)(test)).toBe(false);
    });
});
describe('#isFunction', () => {
    it('should be true if a variable is a function', () => {
        const test = () => 'bar';
        expect((0, index_1.isFunction)(test)).toBe(true);
    });
    it('should be false if a variable is not a function', () => {
        const test = 'bar';
        expect((0, index_1.isFunction)(test)).toBe(false);
    });
});
describe('#isJson', () => {
    it('should be true if a variable is a valid json', () => {
        const test = JSON.stringify({
            foo: {
                bar: true
            }
        });
        expect((0, index_1.isJson)(test)).toBe(true);
    });
    it('should be false if a variable is not a valid json', () => {
        expect((0, index_1.isJson)('')).toBe(false);
        expect((0, index_1.isJson)('bar')).toBe(false);
    });
});
describe('#isNumber', () => {
    it('should be true if a variable is a number', () => {
        expect((0, index_1.isNumber)(-1)).toBe(true);
        expect((0, index_1.isNumber)(0)).toBe(true);
        expect((0, index_1.isNumber)(1)).toBe(true);
    });
    it('should be false if a variable is not a number', () => {
        expect((0, index_1.isNumber)(true)).toBe(false);
        expect((0, index_1.isNumber)(false)).toBe(false);
        expect((0, index_1.isNumber)('O')).toBe(false);
    });
});
describe('#isObject', () => {
    it('should return true if a variable is object', () => {
        const test = {
            foo: 'Foo'
        };
        expect((0, index_1.isObject)(test)).toBe(true);
    });
    it('should return false if a variable is not an object', () => {
        const test = ['Foo'];
        expect((0, index_1.isObject)(test)).toBe(false);
    });
});
describe('#isPassword', () => {
    it('should be true if a value is a valid password', () => {
        expect((0, index_1.isPassword)('12345678')).toBe(true);
    });
    it('should be true if a value is not a valid password', () => {
        expect((0, index_1.isPassword)('12345')).toBe(false);
    });
});
describe('#isString', () => {
    it('should be true if a variable is a string', () => {
        expect((0, index_1.isString)('foo')).toBe(true);
        expect((0, index_1.isString)('123')).toBe(true);
        expect((0, index_1.isString)('true')).toBe(true);
    });
    it('should be false if a variable is not a string', () => {
        expect((0, index_1.isString)(true)).toBe(false);
        expect((0, index_1.isString)(false)).toBe(false);
        expect((0, index_1.isString)(0)).toBe(false);
        expect((0, index_1.isString)(1)).toBe(false);
    });
});
describe('#isUndefined', () => {
    it('should return true if a variable is undefined', () => {
        let test;
        expect((0, index_1.isUndefined)(test)).toBe(true);
    });
    it('should return false if a variable is not undefined', () => {
        const test = 'foo';
        expect((0, index_1.isUndefined)(test)).toBe(false);
    });
});
describe('#isEmptyObject', () => {
    it('should return true if object is empty', () => {
        const obj = {};
        expect((0, index_1.isEmptyObject)(obj)).toBe(true);
        expect((0, index_1.isEmptyObject)(undefined)).toBe(true);
    });
    it('should return false if object is not empty', () => {
        const obj = {
            foo: 'bar'
        };
        expect((0, index_1.isEmptyObject)(obj)).toBe(false);
    });
});
describe('#isLanguage', () => {
    it('should return true if is a valid language', () => {
        expect((0, index_1.isLanguage)('en-US')).toBe(true);
    });
    it('should return false if is not a valid language', () => {
        expect((0, index_1.isLanguage)('bn-IN')).toBe(false);
    });
});
