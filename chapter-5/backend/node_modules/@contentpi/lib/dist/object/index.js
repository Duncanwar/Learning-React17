"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearStorage = exports.removeStorageItem = exports.setStorageItem = exports.getStorageItem = exports.hasOwnProperty = exports.objectToDot = exports.buildContentJson = exports.pick = exports.forEach = exports.keys = exports.getDebug = exports.cloneObject = void 0;
// Dependencies
const dot_object_1 = __importDefault(require("dot-object"));
// Utils
const is_1 = require("../is");
function cloneObject(o) {
    return { ...o };
}
exports.cloneObject = cloneObject;
function getDebug(data) {
    if (data._DEBUG) {
        return JSON.parse(data._DEBUG);
    }
    return null;
}
exports.getDebug = getDebug;
function keys(obj) {
    if ((0, is_1.isObject)(obj)) {
        return Object.keys(obj);
    }
    return [];
}
exports.keys = keys;
function forEach(items, callback) {
    if (!(0, is_1.isDefined)(items)) {
        return false;
    }
    if (((0, is_1.isDefined)(items) && (0, is_1.isDefined)(items[0])) || (0, is_1.isArray)(items)) {
        return items.forEach(callback);
    }
    return (0, is_1.isObject)(items) ? keys(items).forEach(callback) : false;
}
exports.forEach = forEach;
function pick(key, obj) {
    return dot_object_1.default.pick(key, obj) || key;
}
exports.pick = pick;
function buildContentJson(nodes, raw) {
    const rows = {};
    forEach(nodes, (node) => {
        rows[node.key] = node.value;
    });
    if (!raw) {
        dot_object_1.default.object(rows);
    }
    return rows;
}
exports.buildContentJson = buildContentJson;
function objectToDot(nodes) {
    if ((0, is_1.isObject)(nodes)) {
        return dot_object_1.default.dot(nodes);
    }
    return null;
}
exports.objectToDot = objectToDot;
function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
exports.hasOwnProperty = hasOwnProperty;
function getStorageItem(key, returnJson = true) {
    if (!(0, is_1.isBrowser)() || !localStorage) {
        return null;
    }
    const item = localStorage.getItem(key) || '';
    if (returnJson && (0, is_1.isJson)(item)) {
        return JSON.parse(item);
    }
    return item;
}
exports.getStorageItem = getStorageItem;
function setStorageItem(key, value) {
    if ((0, is_1.isBrowser)() && key && value && localStorage) {
        if ((0, is_1.isObject)(value)) {
            value = JSON.stringify(value);
        }
        localStorage.setItem(key, value);
        return true;
    }
    return null;
}
exports.setStorageItem = setStorageItem;
function removeStorageItem(key) {
    if ((0, is_1.isBrowser)() && key && localStorage) {
        localStorage.removeItem(key);
    }
}
exports.removeStorageItem = removeStorageItem;
function clearStorage() {
    if ((0, is_1.isBrowser)() && localStorage) {
        localStorage.clear();
    }
}
exports.clearStorage = clearStorage;
