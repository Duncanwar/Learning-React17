"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadFile = exports.getImageData = exports.getFileExtensionFromURL = exports.bytesToSize = exports.getFileInfo = void 0;
const isomorphic_fetch_1 = __importDefault(require("isomorphic-fetch"));
function getFileInfo(file) {
    if (!file) {
        return {
            fileName: '',
            extension: ''
        };
    }
    const parts = file.split('.');
    const extension = parts.pop();
    const fileName = parts.pop();
    return {
        fileName,
        extension: extension.toLowerCase()
    };
}
exports.getFileInfo = getFileInfo;
function bytesToSize(bytes, maxFileSize, round) {
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    let allowed = true;
    if (bytes > maxFileSize) {
        allowed = false;
    }
    const n = Number(bytes);
    // @ts-ignore
    const i = parseInt(Math.floor(Math.log(n) / Math.log(1024)), 10);
    if (i === 0) {
        return `${bytes} ${sizes[i]}`;
    }
    let size = (bytes / 1024 ** i).toFixed(1);
    if (round) {
        size = Math.ceil(size);
    }
    return {
        size: `${size} ${sizes[i]}`,
        allowed
    };
}
exports.bytesToSize = bytesToSize;
function getFileExtensionFromURL(fileUrl = '') {
    let file = '';
    if (fileUrl) {
        file = fileUrl.split('/').pop();
    }
    return getFileInfo(file);
}
exports.getFileExtensionFromURL = getFileExtensionFromURL;
function getImageData(file) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.src = window.URL.createObjectURL(file);
        img.onload = () => resolve({ width: img.width, height: img.height });
        img.onerror = reject;
    });
}
exports.getImageData = getImageData;
async function uploadFile(file, url) {
    if (!file) {
        return false;
    }
    const fileData = new FormData();
    fileData.append('file', file);
    const response = await (0, isomorphic_fetch_1.default)(url, {
        method: 'POST',
        body: fileData
    });
    const responseData = await response.json();
    if (responseData.destination) {
        return true;
    }
    return false;
}
exports.uploadFile = uploadFile;
